@page "/login"
@using website2.Models
@using website2.Utilities
@using website2.Services
@inject NavigationManager NavigationManager
@inject UserSession UserSession
@inject CustomerService CustomerService

@rendermode InteractiveServer

<PageTitle>Log in</PageTitle>



<div class="container">
    <div>
        <label>Username</label>
        <br />
        <InputText 
        type="text"
        id="username"
        name="username"
        placeholder="enter username"
        @bind-value="newCustomer.Username" />

        <br />

        <label>Password</label>
        <br />
        <InputText type="password"
        id="password"
        name="password"
        placeholder="enter password"
        @bind-value="password" />

        <br />

        <div class="alert" style="display:@(showError ? "block" : "none")">
            <span class="closebtn" @onclick="CloseError">&times;</span>
            @errorMessage
        </div>
        <div class="alert alert-success" style="display:@(showSuccess ? "block" : "none")">
            <span class="closebtn" @onclick="CloseSuccess">&times;</span>
            @successMessage
        </div>


        <button @onclick="@HandleValidSubmit" class="btn">Log In</button>

        <br />
        <br />

        <a href="/register" target="_self">Dont have an account? Sign up here</a>


    </div>
</div>

<script>
    // Get all elements with class="closebtn"
    var close = document.getElementsByClassName("closebtn");
    var i;

    // Loop through all close buttons
    for (i = 0; i < close.length; i++) {
    // When someone clicks on a close button
    close[i].onclick = function(){

    // Get the parent of <span class="closebtn"> (<div class="alert">)
    var div = this.parentElement;

    // Set the opacity of div to 0 (transparent)
    div.style.opacity = "0";

    // Hide the div after 600ms (the same amount of milliseconds it takes to fade out)
    setTimeout(function(){ div.style.display = "none"; }, 600);
    }
    }
</script>

@code {
    private Customer newCustomer = new Customer();
    private string password;
    private string stringPassword;

    private bool showError = false;
    private string errorMessage = "";
    private bool showSuccess = false;
    private string successMessage = "";


    #region Hidden
    protected override async Task OnInitializedAsync()
    {
        if (UserSession.UserId != 0)
        {
            NavigationManager.NavigateTo("/account");
        }
    }
    #endregion



    private async Task HandleValidSubmit()
    {
        // Transform the password (e.g., hash it, append/prepend text, or any other transformation)
        stringPassword = $"{password}";
        UserSession.StringPassword = stringPassword;

        newCustomer.Password = PasswordUtils.HashPassword(password);

        if (newCustomer == null)
        {
            Console.WriteLine("newCustomer is null before login");
            return;
        }


        var customer = await CustomerService.LogIn(newCustomer);

        if (customer == null)
        {
            showError = true;
            errorMessage = "Invalid password.";
            StateHasChanged();
            return;
        }

        UserSession.UserId = customer.CustomerId;
        NavigationManager.NavigateTo("/account");

    }

    private void CloseError()
    {
        showError = false;
        StateHasChanged();  // Forces a re-render after closing
    }

    private void CloseSuccess()
    {
        showError = false;
        StateHasChanged();  // Forces a re-render after closing

    }

}

<style>
    .alert {
        padding: 20px;
        background-color: #f44336; /* Red */
        color: white;
        margin-bottom: 15px;
    }

    .alert-success {
        padding: 20px;
        background-color: #4CAF50; /* Red */
        color: white;
        margin-bottom: 15px;
    }

    /* The close button */
    .closebtn {
        margin-left: 15px;
        color: white;
        font-weight: bold;
        float: right;
        font-size: 22px;
        line-height: 20px;
        cursor: pointer;
        transition: 0.3s;
    }

        /* When moving the mouse over the close button */
        .closebtn:hover {
            color: black;
        }

    .container {
        padding: 20px;
        width: 80%; /* Makes content box smaller */
        max-width: 600px; /* Maximum width of the content box */
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    footer {
        background-color: #333;
        color: white;
        text-align: center;
        padding: 20px;
        margin-top: 20px;
        border-radius: 10px;
    }

    input[type=text], select {
        width: 25%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    input[type=password], select {
        width: 25%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .btn {
        width: 25%;
        background-color: #4CAF50;
        color: white;
        padding: 14px 20px;
        margin: 8px 0;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn:hover {
        background-color: #45a049;
    }

</style>

