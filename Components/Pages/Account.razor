
@using website2.Utilities
@using website2.Services
@using website2.Models
@inject UserSession UserSession
@inject RoomService RoomService
@inject RoombookingService RoombookingService
@inject CustomerService CustomerService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@page "/account"

<h3 class="title">Your Account

</h3>

@if (customer != null)

{

    <div class="container">

        <div class="header">
            <a class="greeting">Hello, @customer.FirstName @customer.LastName</a>
        </div>

        <div id="containermain" class="containermain">
            <div class="nav">
                <button onclick="ViewProfile()" class="navbtn">Your profile</button>
                <button onclick="EditDetails()" class="navbtn">Edit account details</button>
                <button onclick="ChangePass()" class="navbtn">Change password</button>
                <button onclick="ViewBookings()" class="navbtn">View your bookings</button>
            </div>

            <div id="containerchangepass" class="containerchangepass">
                <h1> change your password</h1><br />
                <br />


                <span class="oldpass">old password</span>
                <br />
                <input type="text" @bind-value=@oldPassword />
                <br />
                <br />

                <span class="newpass">new password</span>
                <br />
                <input type="text" @bind-value=@newPassword />
                <br />
                <br />

                <span class="newpass">confirm new password</span>
                <br />
                <input type="text" @bind-value=@newPasswordConfirm />
                <br />
                <br />

             
                <div class="alert" style="display:@(showError ? "block" : "none")">
                    <span class="closebtn" @onclick="CloseError">&times;</span>
                    @errorMessage
                </div>


                <div class="alert alert-success" style="display:@(showSuccess ? "block" : "none")">
                    <span class="closebtn" @onclick="CloseSuccess">&times;</span>
                    @successMessage
                </div>

                

                <button class="savebtn" @onclick=@ChangePassword>save</button>


            </div>

            <div id="containerbody" class="containerbody">

                <h1> Your profile</h1><br /> 

                <span class="AccountFirstname">First name</span>
                <span class="AccountLastname">Last name</span>

                <br />

                <span>
                    <input type="text" id="firstname" class="firstname" value="@customer.FirstName" readonly />
                    <input type="text" id="lastname" class="lastname" value="@customer.LastName" readonly />
                </span>

                <br />
                <br />

                <span class="AccounUsername">Username</span>
                <span class="AccountUserID">Password</span>

                <br />

                <span>
                    <input type="text" id="Username" class="Username" value="@customer.Username" readonly />
                    <input type="text" id="UserID" class="UserID" value="@UserSession.StringPassword" readonly />
                </span>

                <br />
                <br />

                <span class="AccountEmail">Email</span>
                <span class="AccountPhoneNum">Phone Number</span>

                <br />

                <span>
                    <input type="text" id="Email" class="Email" value="@customer.Email" readonly />
                    <input type="text" id="PhoneNum" class="PhoneNum" value="@customer.PhoneNumber" readonly />
                </span>


            </div>

            <div id="containerEditDetails" class="containerEditDetails">
                <h1>Edit your details</h1><br /> 


                <span class="AccountFirstname">First name</span>
                <span class="AccountLastname">Last name</span>

                <br />

                <span>
                    <input type="text" id="firstname" class="firstname" @bind-value=@newFirstName/>
                    <input type="text" id="lastname" class="lastname" @bind-value=@newLastName />
                </span>

                <br />
                <br />

                <span class="AccounUsername">Username</span>
                <span class="AccountUserID">Password</span>

                <br />

                <span>
                    <input type="text" id="Username" class="Username" @bind-value=@newUsername/>
                    <input type="text" id="UserID" class="UserID" value="@UserSession.StringPassword" readonly />
                </span>

                <br />
                <br />

                <span class="AccountEmail">Email</span>
                <span class="AccountPhoneNum">Phone Number</span>

                <br />

                <span>
                    <input type="text" id="Email" class="Email" @bind-value=@newEmail/>
                    <input type="text" id="PhoneNum" class="PhoneNum" @bind-value=@newPhoneNum/>
                </span>

                <br />
                <br />


                <div class="alert" id="test" style="display:@(showError ? "block" : "none")">
                    <span class="closebtn" @onclick="CloseError">&times;</span>
                    @errorMessage
                </div>


                <div class="alert alert-success" id="test" style="display:@(showSuccess ? "block" : "none")">
                    <span class="closebtn" @onclick="CloseSuccess">&times;</span>
                    @successMessage
                </div>

                <button class="Editbtn" @onclick="@ConfirmEditDetails">save</button>

                </div>
            </div>

            <div id="containerBookings" class="containerBookings">

            </div>
      </div>

    


}



<br />

<a href="/bookings">My Bookings</a>

<br />



<button @onclick=Logout class="btn">Log Out</button>

<script>

    function ChangePass() {
    var box = document.getElementById('containerbody');
    box.style.display = 'none';  // Change display to block to show it
    var box = document.getElementById('containerchangepass');
    box.style.display = 'block';  // Change display to block to show it
    var box = document.getElementById('containerEditDetails');
    box.style.display = 'none';
    var box = document.getElementById('test');
    box.style.display = 'none';

    var box = document.getElementById('containterBookings');
    box.style.display = 'none';
    }

    function ViewProfile(){
    var box = document.getElementById('containerbody');
    box.style.display = 'block';  
    var box = document.getElementById('containerchangepass');
    box.style.display = 'none';  
    var box = document.getElementById('containerEditDetails');
    box.style.display = 'none';
    var box = document.getElementById('test');
    box.style.display = 'none';

     var box = document.getElementById('containterBookings');
    box.style.display = 'none';
    }

    function EditDetails(){
    var box = document.getElementById('containerbody');
    box.style.display = 'none';
    var box = document.getElementById('containerchangepass');
    box.style.display = 'none';
    var box = document.getElementById('containerEditDetails');
    box.style.display = 'block';
    var box = document.getElementById('test');
    box.style.display = 'none';
        
    var box = document.getElementById('containterBookings');
    box.style.display = 'none';
    }

   function ViewBookings(){
    var box = document.getElementById('containerbody');
    box.style.display = 'none';
    var box = document.getElementById('containerchangepass');
    box.style.display = 'none';
    var box = document.getElementById('containerEditDetails');
    box.style.display = 'none';
    var box = document.getElementById('test');
    box.style.display = 'none';
    var box = document.getElementById('containterBookings');
     box.style.display = 'block';

    }


    // Get all elements with class="closebtn"
    var close = document.getElementsByClassName("closebtn");
    var i;

    // Loop through all close buttons
    for (i = 0; i < close.length; i++) {
    // When someone clicks on a close button
    close[i].onclick = function(){

    // Get the parent of <span class="closebtn"> (<div class="alert">)
    var div = this.parentElement;

    // Set the opacity of div to 0 (transparent)
    div.style.opacity = "0";

    // Hide the div after 600ms (the same amount of milliseconds it takes to fade out)
    setTimeout(function(){ div.style.display = "none"; }, 600);
    }
    }

</script>

<style>
    .span{
        font-family: DejaVu Sans Mono, monospace;
    }
    
    .greeting{
        color: black
    }

    .title {
        font-weight: bold;
        left: 45%;
        position: relative;
    }

    .alert {
    padding: 20px;
    background-color: #f44336; /* Red */
    color: white;
    margin-bottom: 15px;
    }

    .alert-success {
    padding: 20px;
    background-color: #4CAF50; /* Red */
    color: white;
    margin-bottom: 15px;
    }

    /* The close button */
    .closebtn {
    margin-left: 15px;
    color: white;
    font-weight: bold;
    float: right;
    font-size: 22px;
    line-height: 20px;
    cursor: pointer;
    transition: 0.3s;
    }

    /* When moving the mouse over the close button */
    .closebtn:hover {
    color: black;
    }

    .Email {
    left: -3.5%;
    position: relative;
    }

    .PhoneNum {
    left: 4%;
    position: relative;
    }

    .AccountEmail {
    color: black;
    position: relative;
    left: -15.5%;
    }


    .AccountPhoneNum {
    color: black;
    position: relative;
    left: 10%;
    }

    .Username {
    left: -3.5%;
    position: relative;
    }

    .UserID {
    left: 4%;
    position: relative;
    }

    .AccounUsername {
    color: black;
    position: relative;
    left: -17.5%;
    }


    .AccountUserID {
    color: black;
    position: relative;
    left: 4%;
    }



    .firstname{
    left: -3.5%;
    position: relative;
    }

    .lastname {
    left: 4%;
    position: relative;
    }

    .AccountFirstname {
    color: black;
    position: relative;
    left: -15.5%;
    }


    .AccountLastname {
    color: black;
    position: relative;
    left: 4%;
    }

    input[type=text], select {
    width: 25%;
    padding: 12px 20px;
    margin: 8px 0;
    display: inline-block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }

    input[type=password], select {
    width: 25%;
    padding: 12px 20px;
    margin: 8px 0;
    display: inline-block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }

    .nav{
    display: flex;
    flex-wrap: wrap;
    padding-left: 0;
    margin-bottom: 0;
    list-style: none;
    max-width: 1000px;
    width: 30%;
    flex-direction:column;
    gap: 16px;
    }

    .body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    background-color: #f4f4f4;
    display: flex;
    flex-direction: column; /* Stack items vertically */
    min-height: 100vh; /* Full height of the viewport */
    }

    .navbtn {
    flex-shrink: 0;
    background-color: black;
    color: white;
    padding: 10px;
    display: flex;
    justify-content: center;
    border-radius: 5px;
    margin-bottom: 5px;
    display: inline-block;
    min-width: 85%;
    width: 85%;
    height: 20%;
    max-height: 600px;
    min-width: 120px;
    }

    .navbtn:hover{
            background-color: #333333;
            color: white;
    }

    navbtn button {
    color: white;
    padding: 10px 20px;
    text-decoration: none;
    margin: 0 10px;
    transition: background-color 0.3s;
    display: flex;
    }

    .navbtn:last-child {
    margin-bottom: 0; /* Remove margin for the last button */
    }

    .container {
    padding: 20px;
    width: 100%; /* Makes content box smaller */
    max-width: 1000px; /* Maximum width of the content box */
    height: 60%;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
    flex-direction: column; /* Stack items vertically */
    display: flex;
        border: 0.2rem solid lightgrey;
    }

    .containerbody {
        background-color: #f2f2f2;
    padding: 20px;
    width: 100%;
    max-width: 770px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
    position: relative;
    flex-direction: column; /* Stack items vertically */
    display: block;

    }

    .containerchangepass {
        background-color: #f2f2f2;
    padding: 20px;
    width: 100%;
    max-width: 770px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
    position: relative;
    flex-direction: column; /* Stack items vertically */
    display: none;
    }

    .containerEditDetails {
        background-color: #f2f2f2;
    padding: 20px;
    width: 100%;
    max-width: 770px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
    position: relative;
    flex-direction: column; /* Stack items vertically */
    display: none;
    }


    .containterBookings {
    background-color: #f2f2f2;
    padding: 20px;
    width: 100%;
    max-width: 770px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
    position: relative;
    flex-direction: column; /* Stack items vertically */
    display: none;
    }

    .btn {
    width: 20%;
    background-color: black;
    color: white;
    padding: 14px 20px;
    margin: 8px 0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    position: relative;
    left: 40%;
    }

    .btn:hover {
            background-color: #333333;
            color: white;
    }

    .Editbtn {
    width: 20%;
    background-color: black;
    color: white;
    padding: 14px 20px;
    margin: 8px 0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    position: relative;
    left: 0%;
    }

    .Editbtn:hover {
            background-color: #333333;
            color: white;
    }


    .header{
        background-color: #f2f2f2;
    color: white;
    text-align: center;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    }

    .savebtn {
    width: 20%;
    background-color: black;
    color: white;
    padding: 14px 20px;
    margin: 8px 0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    position: relative;
    left: 0%;
    }

    .savebtn:hover {
            background-color: #333333;
            color: white;
    }


    .containermain{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    }

</style>

@code {

    private string newFirstName;
    private string newLastName;

    private string newUsername;

    private string newEmail;
    private string newPhoneNum;

    private string newPassword;
    private string oldPassword;
    private string newPasswordConfirm;

    private bool showError = false;
    private string errorMessage = "";
    private bool showSuccess = false;
    private string successMessage = "";

    private Customer customer;
    private List<Room> rooms;

    private DateOnly startDate;

    private Room Room;
    private int Roomnumber;
    private int Days;

    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        rooms = await RoomService.GetRoomsAsync();
        if (UserSession.UserId == 0)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            customer = await CustomerService.GetCustomerFromIdAsync(UserSession.UserId);
        }
    }

    private async Task ShowUserId()
    {
        Console.WriteLine(UserSession.UserId); // Retrieve server-side user ID
    }
    private async Task Logout()
    {
        UserSession.UserId = 0;
        NavigationManager.NavigateTo("/login");
    }

    private async Task Testbox()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task SetRoom()
    {

    }
    private async Task BookRoom()
    {
        Console.WriteLine(Roomnumber);
        Room = await RoomService.GetRoomAsync(Roomnumber);
        await RoombookingService.AddRoombookingAsync(customer, Room, startDate, Days);

    }

    private async Task ChangePassword()
    {
        if (oldPassword == newPassword)
        {
            showError = true;
            errorMessage = "Cant use old password for new password.";
            StateHasChanged();
            return;
        }


        if (newPassword == newPasswordConfirm)
        {
            string hashedNewPassword = PasswordUtils.HashPassword(newPassword);
            string hashedOldPassword = PasswordUtils.HashPassword(oldPassword);
            await CustomerService.ChangePassword(UserSession.UserId, hashedOldPassword, hashedNewPassword);
            showSuccess = true;
            successMessage = "Your password has been successfully changed.";
            StateHasChanged();
        }
    }



    private async Task ConfirmEditDetails()
    {
        Customer thisCustomer = await CustomerService.GetCustomerFromId(UserSession.UserId);
        if (newFirstName != null)
        {
            thisCustomer.FirstName = newFirstName;

        }

        if (newLastName != null)
        {
            thisCustomer.LastName = newLastName;
        }

        if (newUsername != null)
        {
            thisCustomer.Username = newUsername;
        }

        if (newEmail != null)
        {
            thisCustomer.Email = newEmail;
        }

        if (newPhoneNum != null)
        {
            thisCustomer.PhoneNumber = newPhoneNum;
        }
        else
        {
            await CustomerService.updateCustomer(thisCustomer);

        }
        showSuccess = true;
        successMessage = "Your changes has been saved.";
        StateHasChanged();

    }

    private void CloseError()
    {
        showError = false;
        StateHasChanged();  // Forces a re-render after closing
        return;

    }

    private void CloseSuccess()
    {
        showSuccess = false;
        StateHasChanged();  // Forces a re-render after closing
       


    }
}