@using website2.Services
@using website2.Models
@using website2.Utilities
@page "/register"
@rendermode InteractiveServer
@inject CustomerService CustomerService
@inject NavigationManager NavigationManager



<PageTitle>Register</PageTitle>

<h1>register</h1>


<div class="container">
    <form>

        <span class="personalDetails">Personal details</span>
        <span class="Accountinfo">Account information</span>
        <br />

        <InputText type="text"
        id="firstName"
        class="firstName" 
        maxlength="15" 
        minlength="4" 
        placeholder="First Name" 
        required 
        @bind-value="newCustomer.FirstName"></InputText>

        <InputText type="text"
        id="LastName"
        class="lastName"
        maxlength="15"
        minlength="4"
        placeholder="Last Name"
        required
        @bind-value="newCustomer.LastName"></InputText>

        <InputText type="text"
        id="Username"
        class="Username"
        maxlength="15"
        minlength="4"
        placeholder="Username"
        required
        @bind-value="newCustomer.Username"></InputText>

        <InputText type="password"
        id="Password"
        class="password"
        maxlength="15"
        minlength="4"
        placeholder="Password"
        required
        @bind-value="newCustomer.Password"></InputText><br />

        <InputText type="text"
        id="phoneNum"
        class="phoneNum"
        maxlength="15"
        minlength="4"
        placeholder="Phone Number"
        required
        @bind-value="newCustomer.PhoneNumber"></InputText>

        <InputText type="text"
        id="postCode"
        class="postCode"
        maxlength="15"
        minlength="4"
        placeholder="post Code"
        required
        @bind-value="newCustomer.Postcode"></InputText> 


        <InputText type="email"
        id="email"
        class="email"
        maxlength="30"
        minlength="4"
        placeholder="Email address"
        required
        @bind-value="newCustomer.Email"></InputText><br />



    </form>
    <div class="alert" style="display:@(showError ? "block" : "none")">
        <span class="closebtn" @onclick="CloseError">&times;</span>
        @errorMessage
    </div>
    <div class="alert alert-success" style="display:@(showSuccess ? "block" : "none")">
        <span class="closebtn" @onclick="CloseSuccess">&times;</span>
        @successMessage
    </div>
</div>

<input type="submit" @onclick=@RegisterCustomer class="btn">Submit</input>


<div id="blazor-error-ui">
    Error. This username already exists, please try a different one.
    <a class="dismiss">🗙</a>
</div>


<script>
    function myFunction() {
    var x = document.getElementById("password");
    if (x.type === "password") {
    x.type = "text";
    } else {
    x.type = "password";
    }
    }

    // Get all elements with class="closebtn"
    var close = document.getElementsByClassName("closebtn");
    var i;

    // Loop through all close buttons
    for (i = 0; i < close.length; i++) {
    // When someone clicks on a close button
    close[i].onclick = function(){

    // Get the parent of <span class="closebtn"> (<div class="alert">)
    var div = this.parentElement;

    // Set the opacity of div to 0 (transparent)
    div.style.opacity = "0";

    // Hide the div after 600ms (the same amount of milliseconds it takes to fade out)
    setTimeout(function(){ div.style.display = "none"; }, 600);
    }
    }

</script>


@code{
    private Customer newCustomer = new Customer();
    private bool showError = false;
    private string errorMessage = "";
    private bool showSuccess = false;
    private string successMessage = "";


    private bool IsValidPhoneNumber(string phoneNumber)
    {
        // Simple regex for 10-digit phone numbers
        var regex = new System.Text.RegularExpressions.Regex(@"^\d{10}$");
        return regex.IsMatch(phoneNumber);
    }

    private bool IsValidPostcode(string postcode)
    {
        // Example regex for UK postcodes
        var regex = new System.Text.RegularExpressions.Regex(@"^[A-Z]{1,2}\d[A-Z\d]? \d[A-Z]{2}$");
        return regex.IsMatch(postcode);
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email; // This checks if the email is valid.
        }
        catch
        {
            return false;
        }
    }


    private async Task RegisterCustomer()
    {

        if (string.IsNullOrEmpty(newCustomer.FirstName))
        {
            showError = true;
            errorMessage = "Please enter a first name.";
            StateHasChanged();  // Re-render the component to show the error message
            return;  // Prevent form submission
        }
        else if (string.IsNullOrEmpty(newCustomer.LastName))
        {
            showError = true;
            errorMessage = "Please enter a last name.";
            StateHasChanged();  // Re-render the component to show the error message
            return;  // Prevent form submission
        }
        else if (string.IsNullOrEmpty(newCustomer.Username))
        {
            showError = true;
            errorMessage = "Please enter a username.";
            StateHasChanged();  // Re-render the component to show the error message
            return;  // Prevent form submission
        }
        else if (string.IsNullOrEmpty(newCustomer.Password))
        {
            showError = true;
            errorMessage = "Please enter a password.";
            StateHasChanged();  // Re-render the component to show the error message
            return;  // Prevent form submission
        }
        else if (string.IsNullOrEmpty(newCustomer.PhoneNumber))
        {
            showError = true;
            errorMessage = "Please enter a Phone Number.";
            StateHasChanged();  // Re-render the component to show the error message
            return;  // Prevent form submission
        }
        else if (string.IsNullOrEmpty(newCustomer.Postcode))
        {
            showError = true;
            errorMessage = "Please enter a post code.";
            StateHasChanged();  // Re-render the component to show the error message
            return;  // Prevent form submission
        }
        else if (string.IsNullOrEmpty(newCustomer.Email))
        {
            showError = true;
            errorMessage = "Please enter an email address.";
            StateHasChanged();  // Re-render the component to show the error message
            return;  // Prevent form submission
        }

        if (string.IsNullOrEmpty(newCustomer.PhoneNumber) || !IsValidPhoneNumber(newCustomer.PhoneNumber))
        {
            showError = true;
            errorMessage = "Please enter a valid phone number (10 digits: e.g. 0000000000).";
            StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(newCustomer.Postcode) || !IsValidPostcode(newCustomer.Postcode))
        {
            showError = true;
            errorMessage = "Please enter a valid postcode (e.g., SW1A 1AA).";
            StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(newCustomer.Email) || !IsValidEmail(newCustomer.Email))
        {
            showError = true;
            errorMessage = "Please enter a valid email address.";
            StateHasChanged();
            return;
        }



        try
        {
            // Simulate validation for username
            bool isUsernameExists = await CustomerService.DoesUsernameExistsAsync(newCustomer.Username);
            if (isUsernameExists)
            {
                showError = true;
                errorMessage = "This username already exists, please try a different one.";
                StateHasChanged();
                return;
            }

            // Hash password and proceed with registration
            newCustomer.Password = PasswordUtils.HashPassword(newCustomer.Password);
            await CustomerService.AddCustomerAsync(newCustomer);

            // Display success message
            showSuccess = true;
            successMessage = "Your account has been successfully registered! Closing this will return to the log in page.";
            StateHasChanged();  // Trigger re-render to show the success messa

        }
        catch (Exception ex)
        {
            showError = true;
            
            errorMessage = "An error occurred: " + ex.Message;
            if (errorMessage == "An error occurred: An error occurred while saving the entity changes. See the inner exception for details.")
            {
                errorMessage = "An error occurred: Please re-enter your details";
            }
            StateHasChanged();
        }
    }
    
    private void CloseError()
    {
        showError = false;
        StateHasChanged();  // Forces a re-render after closing
    }

    private void CloseSuccess()
    {
        showError = false;
        StateHasChanged();  // Forces a re-render after closing
        NavigationManager.NavigateTo("/login");

    }

}


<style>
    .container {
        padding: 20px;
        width: 100%; /* Makes content box smaller */
        max-width: 1000px; /* Maximum width of the content box */
        height: 60%;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    input[type=text], select {
        width: 20%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    input[type=tel], select {
        width: 20%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    input[type=email], select {
        width: 20%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    input[type=password], select {
        width: 20%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .btn {
        width: 20%;
        background-color: #4CAF50;
        color: white;
        padding: 14px 20px;
        margin: 8px 0;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        position: relative;
        left: 40% ;
    }

        .btn:hover {
            background-color: #45a049;
        }

    .personalDetails{
        position:relative;
        color:black;
        left: -36%;
        justify-content: space-between;
        
    }


    .Accountinfo {
        position: relative;
        color: black;
        left: -2%;
        justify-content: space-between;
    }

    .A {
        position: relative;
        color: black;
        left: -43%;
    }

    .firstName{
        position: relative;
        left: -9%;
        justify-content: space-between;
    }

    .lastName{
        position: relative;
        left: -8%;
        justify-content: space-between;
    }

    .phoneNum {
        position: relative;
        left: -19.5%;
    }

    .postCode {
        position: relative;
        left: -18.5%;
    }

    .Username {
        position: relative;
        left: -4%;
        justify-content: space-between;
    }

    .password {
        position: relative;
        left: -3%;
        justify-content: space-between;
    }

    .email {
        position: relative;
        left: -14%;
    }

    .alert {
        padding: 20px;
        background-color: #f44336; /* Red */
        color: white;
        margin-bottom: 15px;
    }

    .alert-success {
        padding: 20px;
        background-color: #4CAF50; /* Red */
        color: white;
        margin-bottom: 15px;
    }
    /* The close button */
    .closebtn {
        margin-left: 15px;
        color: white;
        font-weight: bold;
        float: right;
        font-size: 22px;
        line-height: 20px;
        cursor: pointer;
        transition: 0.3s;
    }

        /* When moving the mouse over the close button */
        .closebtn:hover {
            color: black;
        }

</style>